<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>RoboJournal Compile/Installation Guide</title>
<meta name="generator" content="Bluefish 2.0.1" />
<meta name="author" content="Will Kraft" />
<meta name="date" content="2012-08-22T22:15:27-0500" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8"/>
<meta http-equiv="content-type" content="application/xhtml+xml; charset=UTF-8"/>
<meta http-equiv="content-style-type" content="text/css"/>
<style type="text/css">

	body{
		background-color: #1d1d1d;
	}
	
	.main{
		width: 85%;
		border: solid 1px black;
		margin-left: auto;
		margin-right: auto;
		background-color: #ffffff;
		border-radius: 20px;
	}
	
	h1 {
		font-family: calibri,verdana,sans-serif;
		font-weight: bold;
		font-size: 3.3em;
		text-align: center;
	}	
	
	h2{
		font-family: calibri,verdana,sans-serif;
		font-weight: bold;
		font-size: 2em;
		background-color: #828282;
		color: #FFFFFF;
		width: 100%;
		border-top: solid 1px #1d1d1d;
		border-bottom: solid 1px #1d1d1d;
		margin-top: 0.4em;
		margin-bottom: 0.4em;	
		margin-right: -1em;
		padding-top: 0.1em;
		padding-bottom: 0.1em;
	}
	
	h3{
		font-family: cambria,times new roman,serif;
		font-weight: bold;
		font-size: 1.5em;
		margin-left: 2.5em;
		color: #000000;
	}
	
	p{
	font-family: cambria,times new roman,serif;
	color: #000000;
	font-size: 1em;
	margin-bottom: 1em;
	margin-left: 1.3em;
	margin-right: 1.3em;
	}
	
	li{
	font-family: cambria,times new roman,serif;
	color: #000000;
	font-size: 1em;
	margin-bottom: 0.5em;
	padding-top: 0.4em;
	margin-left: 1em;
	margin-right: 1em;
	}
	
	.FYI{
	border: solid 1px gray;
	padding: 1em;
	margin-left: auto;
	margin-right: auto;
	width: 80%;
	font-family: calibri,verdana,sans-serif;
	margin-top: 1em;
	margin-bottom: 1em;
	background-color: #e4e4e4;
	border-radius: 20px;
	}
	
	.FYI li{
	font-family: calibri,verdana,sans-serif;
	color: #000000;
	font-size: 1em;
	margin-bottom: 0.5em;
	margin-left: 1em;
	margin-right: 1em;
	}
	
	.FYI p{
	font-family: calibri,verdana,sans-serif;
	color: #000000;
	font-size: 1em;
	margin-bottom: 0.5em;
	margin-left: 1em;
	margin-right: 1em;
	}
	
	.FYI_console{
	font-family: monospace;
	font-weight: bold;
	font-size: inherit;
	}
	
	.console{
	font-family: courier new, liberation mono,monospace;
	font-size: 1em;
	font-weight: bold;
	}

</style>
</head>
<body>

<div class="main">
<h1>RoboJournal Installation Guide</h1>



<p>Thank you for downloading RoboJournal. The purpose of this guide is to assist
users in the process of compiling and installing RoboJournal
on an operating system. This guide contains all instructions necessary to
compile RoboJournal from its source code. 
Although RoboJournal depends on Qt, this guide assumes that you have a complete,
fully-functional Qt environment available before 
you begin the RoboJournal compile process. Although this guide provides
Qt-related recommendations and requirements, it does not provide 
start-to-finish instructions for building Qt from source.</p>
<h2>&nbsp;&nbsp;Prerequisites</h2>

<p>Before you can compile RoboJournal, you must have <em>all</em> of the following:</p>

<ol>
	<li>RoboJournal source tarball (and any extra software required to
unpack the tar.gz archive). <b>A directory created from the tarball will contain
all of the following:</b>
		<br /><br />
		<ol>
			<li>C++ source code files (*.cpp).</li>
			<li>C headers (*.h).</li>
			<li>Qt user interface XML components (*.ui).</li>
			<li>Qt resource files (images.qrc and icon.rc).</li>
			<li>&quot;icons&quot; folder containing all necessary
	images.</li>
			<li>Qt project file (robojournal.pro).</li>
			<li>Release changelog (changelog.htm).</li>
			<li>GNU General Public License 3 (license.txt).</li>
			<li>Build documentation (<span style="color: #FF0000">this
	file</span>)</li>
			<li>Windows Build Helper Script (win32_compile.bat).</li>
		</ol>

	</li>

	<li> A Qt &gt;= 4.7.4 environment to compile against. Consult the <i>Preparing Qt</i> section in this document for details on what is required.</li>
	
	<li>GNU Compiler Toolkit. Most of the time, it is easier to install the
full toolkit. The package containing the full kit is called <i>build-essential</i> on several distros, 
including Ubuntu and Debian. In addition to compilers, <i>build-essential</i> contains other utilities that will help you create a software
package; you should only package your custom build if you plan to eventually redistribute it.
<br /> <br />
If the full kit is unavailable, installing GNU make and g++ (at the bare minimum) will allow you to build RoboJournal. This guide
assumes that all compilers in use are 32-bit unless indicated otherwise. 
		<div class="FYI"><strong>FYI:</strong> Windows users should use the <a
	href="http://sourceforge.net/projects/mingw/files/">MinGW
	toolkit</a> (Minimalist GNU for Windows) instead of other compiler toolchains. This guide only provides
	instructions for MinGW. Alternatives may work fine but they should still be
	considered experimental/unsupported for the purpose of building
	RoboJournal.</div>
	</li>
	<li>A text editor (<em>not</em> Microsoft Word) if you wish to use the
Build Helper Script to compile for Windows (You will need to edit the script
before using it for the first time). Non-Windows users should ignore this
requirement since the build helper script does not work with other operating
systems.</li>
	

	
</ol>


<p>RoboJournal has been tested extensively on Linux (Debian, Fedora, Ubuntu) and
Windows (XP and newer). RoboJournal should operate reliably and correctly on the
aforementioned operating systems but others should be considered experimental at
this point. If you build and deploy RoboJournal on an experimental operating
system, you should be ready for unexpected bugs even if everything appears to
work correctly.</p>

<p>If you wish to use standard RoboJournal, you should use pre-compiled binaries
for best results. There is an installer available for Microsoft
Windows and you may obtain packages compatible with Debian-based Linux from
SourceForge. You should try these options first to see if they work.
If not, or if you are using an operating system for which no RoboJournal
installer package exists, your only option will be to build from
source.</p>

<h2>&nbsp;&nbsp;Preparing Qt</h2>

<p>You should compile Qt <em>only</em> if you don't have a set of suitable Qt
libraries available for use with RoboJournal.  Suitable Qt libraries are defined
as being compiled for your correct operating system/system architecture and
contain complete driver support for both MySQL and SQLite.</p>
<p>Linux users should check their distro repositories first to see if there is a
complete set (containing the core SQL module and separate packages for MySQL and
SQLite drivers) of up-to-date (>= 4.7.4) Qt libraries available.  If so, you
will probably be able to compile against these packages so there would be no
reason to build your own Qt environment from scratch. A complete Qt environment
is usually much harder to find ready-made for Microsoft Windows, so you will
probably have to compile your own if you feel the need to build RoboJournal from
source. Linux and Windows Qt environments are not interchangeable; you may
<em>not</em> use a set of Windows libraries on Linux and vice versa.  <b>The
official Qt SDK offered by Nokia does not offer database support so it may <span style="text-decoration: underline;">not</span>
be used to build RoboJournal.</b></p>

<div class="FYI"><strong>FYI:</strong> If you need to compile Qt, you will
require all of the following:

		<ol>
			<li>MySQL headers and libraries. Headers and libraries should be
	installed in a convenient location. Headers consist of the .h files found in the
	MySQL development module; libraries are found in the file libmysql.lib. The
	location of these objects on your system (assuming they are available) will vary
	depending on your situation. If you are using a 32-bit compiler, (MinGW) MySQL
	libraries <em>must</em> be 32-bit even on 64-bit Windows systems. Compiling
	against 64-bit libraries will cause the build attempt to fail because MinGW can
	only produce 32-bit binaries. However, if you can obtain 64-bit compilers
	(64-bit GNU toolkit or MinGW-w64) you could then produce a fully 64-bit
	RoboJournal binary based on 64-bit Qt and MySQL libraries. However, this should
	be considered experimental.</li>
			<li>Qt (>= 4.7) source code from Nokia's website.</li>
			<li>Perl (ActivePerl is recommended) if building on Windows.
	Linux users seldom have to install Perl because it is standard on most
	distros.</li>
		</ol>
	
	
</div>

<p>Before you compile Qt, you will be given the option to build debug and/or
release libraries. Most of the time, you should only compile release libraries
since programs compiled from debug libraries can be much larger in terms of file
size due to containing testing/debug data that you will not need on production
systems. By default, RoboJournal's build helper script  will produce a release
build on Windows systems.</p>

<p>The Qt compile process can be simple or fairly complicated depending on the
configuration you plan to use. You will first need to specify the path to the
headers/libraries in the configuration process, and once the build begins you
should expect the process to take several hours depending on your processor
speed/number of cores. If you need help, please follow the steps in  <a
href="http://www.rag.com.au/linux/qt4howto.html">this tutorial</a>.</p>  

<p>Although RoboJournal will work if you compile the MySQL/SQLite driver as a
plugin,  you should compile the drivers into the main Qt SQL module for best
results (i.e use <span class="console">-qt-sql-mysql</span> instead of <span
class="console">–qt-plugin-mysql</span> during the Qt configuration process).
That way, you are much less likely to run into any unexpected problems caused by
Qt not being able to find the MySQL/SQLite plugins at runtime. If RoboJournal is
built using a flawed Qt where the drivers are compiled improperly, failed to
compile, or are otherwise missing, RoboJournal will not be able to make any
database connections.</p>



<h2>&nbsp;&nbsp;Building From Source</h2>

<p>The procedure for building RoboJournal varies widely depending on operating
system. The process generally consists of generating a Makefile, compiling the
source, and installing the new binary.</p>
<p>A Makefile consists of the necessary instructions required to build a program
for a given operating system. Makefiles are operating system specific; a
Makefile generated on a Linux system will not build a valid Windows executable
or vice versa.  RoboJournal’s Makefiles are generated by a program called QMake,
which is part of the Qt development environment you should have at this
point.</p>
<h3>Windows Compile Procedure</h3>

<div class="FYI">
	<p><strong>FYI:</strong> RoboJournal 0.3 and newer includes a build
helper script which automates the compile procedure on Windows (2000, XP, Vista,
and 7) machines. Open win32_compile.bat in a text editor and make all necessary
path changes (specify the locations of Qt and MinGW on your system but do not
change anything else). After that, run win32_compile.bat to compile RoboJournal
in one easy step.</p>
	
	<p>The build helper script builds robojournal.exe inside a separate
&quot;release&quot; folder in the robojournal-0.3 directory. After the helper
script is finished, you will need to copy the required dependency files (refer
to step 10 below for a complete list) to the
&quot;...\robojournal-0.3\release&quot; folder if robojournal.exe was
<em>not</em> compiled against a static Qt. </p>
</div>

<p>This procedure should work for any NT-based Windows since Windows 2000. If
you wish to compile RoboJournal manually instead of using the build helper
script, follow the procedure below. For the sake of simplicity in this example,
assume Qt is located at C:\Qt, MinGW is located at C:\MinGW, and RoboJournal is
located at C:\robojournal-0.3.  <b>In a real-world situation, these locations
may vary depending on where you installed everything so revise the paths
accordingly.</b></p>

<ol>
	<li>Open a terminal (Start &raquo; Run &raquo; cmd.exe).</li>
	<li>Navigate to the RoboJournal source folder.  Type "<span
class="console">cd C:\robojournal-0.3</span>" and press Enter.</li>
	<li>Set the path to qmake.exe. Type "<span class="console">path
C:\Qt\bin</span>" and press Enter. Cmd.exe will now be able to run programs from
C:\Qt even though you should still be in the C:\robojournal-0.3 directory.</li>
	<li>Type "<span class="console">qmake –config release
robojournal.pro</span>" and press Enter. This will create a Makefile in the
C:\robojournal-0.3 directory.</li>
	<li>Type "<span class="console">dir</span>" (and press Enter) to display
the file list.</li>
	<li>If there is a Makefile in the file list, change the path to MinGW.
Type "<span class="console">path C:\MinGW\bin</span>" and press Enter.</li>
	<li>Type "<span class="console">mingw32-make</span>" at the command
prompt and press Enter.</li>
	<li>Mingw32-make will produce lots of compile output. Wait for it to
finish.</li>
	<li>At this point, you should have a robojournal.exe file in the
robojournal-0.3 directory.</li>
	<li>Robojournal.exe will work by itself if the Qt you compiled against
was static-built. If your Qt is <em>not</em> static, locate the following files
on your hard drive (they <em>must</em> be from the same Qt and MinGW libraries
you compiled against) and copy them to the C:\robojournal-0.3\ folder: 
		<br />
		<ol>
				<li>libgcc_s_dw2-1.dll</li>
				<li>libmysql.dll</li>
				<li>libstdc++-6.dll</li>
				<li>QtCore4.dll</li>
				<li>QtGui4.dll</li>
				<li>QtSql4.dll</li>
		</ol>
		<br />
	</li>
	<li>Run <span class="console">C:\robojournal-0.3\robojournal.exe</span>.</li>
	<li>The <strong>Welcome To RoboJournal</strong> dialog is displayed.
Create a new database or connect to an existing one to complete the setup
process.</li>
</ol>


<h3>Linux Compile Procedure</h3>
<p>The build process for Linux is much more straightforward. Unlike most
source packages, there is no &quot;./configure&quot; script that must be run before the
compile process can begin; QMake handles Makefile creation and all other necessary
configuration. For now, you should use this procedure if you want to compile
RoboJournal for Mac OS X or FreeBSD.</p>
<p>All the programs you will need for the build (except QMake) are stored in
&quot;/bin&quot; or &quot;/usr/bin&quot;.  This document assumes that Qt 4.7.4
is installed at &quot;/usr/local/Trolltech/Qt-4.7.4&quot;  (the default install
location for Qt 4.7.4 if it is built from source). For the sake of simplicity,
assume that RoboJournal’s source code is found at &quot;~/robojournal-0.3&quot;
(~ indicates the user’s home directory). <b>In a real-world situation, these
locations may vary depending on where you installed everything so revise the
paths accordingly.</b></p>

<p>If you decide to install RoboJournal after compiling it, the executable will
be located at /usr/local/bin/robojournal. /usr/local/bin is the default install
location for software that has been compiled from source or is not managed by
any package management system. Under no circumstances should the RoboJournal
executable be placed in /usr/bin or /bin. If you decide to compile and install a
new version of RoboJournal in the future, you must remove the currently
installed version first (run &quot;<span class="console">make
uninstall</span>&quot; as root or superuser from the old version's build
folder).</p>

<ol>
	<li>Open a terminal application (xterm or similar). There is no specific
shell requirement; most systems use Bash by default. The terminal will usually
start in your home directory (i.e. <span class="console">you@foo:<span style="color:#f00">~</span>$</span>)</li>
	<li>Type &quot;<span class="console">cd ~/robojoural-0.3</span>&quot;
and press Enter.</li>
	<li>You should now be in the robojournal-0.3 directory. (i.e. in this hypothetical example the terminal prompt would say
	<span class="console">you@foo:~/robojournal-0.3$</span>)</li>
	<li>Type &quot;<span
class="console">/usr/local/Trolltech/Qt-4.7.4/bin/qmake
robojournal.pro</span>&quot; and press Enter.</li>
	<li>Wait for the qmake process to finish. It should only take a few
seconds.</li>
	<li>Verify the existence of the new Makefile. Type &quot;<span
class="console">ls | grep Makefile</span>&quot; and press Enter. You should get
&quot;Makefile&quot; as a response if qmake finished correctly.</li>
	<li>Type &quot;<span class="console">make</span>&quot; and press
Enter.</li>
	<li>Wait for the compiler to finish.</li>
	<li>Run "<span class="console">make install</span>" as root or superuser
to install. If you ever want to uninstall, run &quot;<span class="console">make
uninstall</span>&quot; from the robojournal-0.3 directory as root or
superuser.</li>
	<li>To see if the program installed properly, type &quot;<span
class="console">robojournal</span>&quot; at the command prompt and press Enter.
If you decided not to install RoboJournal to /usr/local/bin, you may still run it
 from the robojournal-0.3 directory by typing &quot;<span class="console">./robojournal</span>&quot;.
The <b>Welcome to RoboJournal</b> dialog is displayed. Create a new database or
connect to an existing one to complete the setup process.</li>
</ol>


<p>If you wish to clean up the object code (*.o files) left behind by the
compiler, run &quot;<span class="console">make clean</span>&quot; in the build
folder. Run &quot;<span class="console">make distclean</span>&quot; if you wish
to <em>completely</em> clean the source folder and return it to its original
condition (as it was when you extracted it from the tarball).  <b>You must run a
distclean between every build.</b></p>

<p>Last Updated: August 23, 2012</p>

<p>
    <a href="http://validator.w3.org/check?uri=referer"><img
      src="http://www.w3.org/Icons/valid-xhtml10" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a>
  
    <a href="http://jigsaw.w3.org/css-validator/check/referer">
        <img style="border:0;width:88px;height:31px"
            src="http://jigsaw.w3.org/css-validator/images/vcss"
            alt="Valid CSS!" />
    </a>
  </p>
</div>
</body>
</html>